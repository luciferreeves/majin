package templates

templ Login() {
	@Base("Terminal Login") {
		<div class="min-h-screen bg-black flex items-center justify-center relative overflow-hidden">
			// Background Effects
			<div class="absolute inset-0 bg-gradient-to-br from-purple-900/20 via-cyan-900/20 to-blue-900/20"></div>
			<div class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(0,255,255,0.1),transparent_50%)]"></div>
			// Animated Grid
			<div class="absolute inset-0">
				<div class="absolute inset-0 grid grid-cols-12 gap-4 opacity-20">
					for i := 0; i < 12; i++ {
						<div class="h-full border-r border-cyan-500/30"></div>
					}
				</div>
				<div class="absolute inset-0 grid grid-rows-12 gap-4 opacity-20">
					for i := 0; i < 12; i++ {
						<div class="w-full border-b border-cyan-500/30"></div>
					}
				</div>
			</div>
			// Login Container
			<div
				class="relative w-96 backdrop-blur-sm border border-cyan-500/50 bg-gradient-to-b from-black/80 via-black/90 to-black/80 p-8"
			>
				// Decorative Corners
				<div class="absolute -top-3 -left-3 w-6 h-6 border-t border-l border-cyan-500"></div>
				<div class="absolute -bottom-3 -right-3 w-6 h-6 border-b border-r border-cyan-500"></div>
				// Header
				<div class="mb-8 text-center relative">
					// Terminal Icon
					<div class="flex justify-center mb-4">
						<svg
							class="w-12 h-12 text-cyan-500 animate-pulse"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
						>
							<path stroke-linecap="round" stroke-linejoin="round" d="M16.5 12a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0Zm0 0c0 1.657 1.007 3 2.25 3S21 13.657 21 12a9 9 0 1 0-2.636 6.364M16.5 12V8.25"></path>
						</svg>
					</div>
					<h1 class="text-cyan-500 text-2xl tracking-[0.2em] font-bold mb-2 relative">
						<span class="absolute -left-2 top-0 w-1 h-full bg-cyan-500 animate-blink"></span>
						WELCOME TO MAJIN MAIL INTERFACE
					</h1>
					<p class="text-cyan-600 text-sm tracking-widest">TERMINAL ACCESS v2.0</p>
					// Status Indicators
					<div class="flex justify-center gap-4 mt-4">
						// WiFi Icon
						<svg class="w-4 h-4 text-cyan-500 animate-pulse" viewBox="0 0 24 24" fill="none" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" d="M8.288 15.038a5.25 5.25 0 0 1 7.424 0M5.106 11.856c3.807-3.808 9.98-3.808 13.788 0M1.924 8.674c5.565-5.565 14.587-5.565 20.152 0M12.53 18.22l-.53.53-.53-.53a.75.75 0 0 1 1.06 0Z"></path>
						</svg>
						// Shield Icon
						<svg class="w-4 h-4 text-cyan-500 animate-pulse" viewBox="0 0 24 24" fill="none" stroke="currentColor">
							<path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
						</svg>
					</div>
				</div>
				// Login Form
				<form id="login-form" hx-post="/auth/login" hx-target="body" hx-push-url="/mail" class="space-y-6">
					<div class="space-y-1">
						<label class="block text-cyan-500 font-bold text-xs tracking-wider">USER_ID</label>
						<div class="relative">
							<input
								type="email"
								name="email"
								class="w-full bg-black/30 border border-cyan-500/50 text-cyan-400 p-2 text-sm focus:outline-none focus:border-cyan-500 focus:shadow-[0_0_10px_rgba(0,255,255,0.2)] placeholder-cyan-800"
								placeholder="enter credentials"
								autocomplete="off"
								required
								autofocus
							/>
							<div class="absolute right-2 top-1/2 -translate-y-1/2 w-2 h-2 bg-cyan-500 animate-pulse"></div>
						</div>
					</div>
					<div class="space-y-1">
						<label class="block text-cyan-500 font-bold text-xs tracking-wider">ACCESS_KEY</label>
						<div class="relative">
							<input
								type="password"
								name="password"
								class="w-full bg-black/30 border border-cyan-500/50 text-cyan-400 p-2 text-sm focus:outline-none focus:border-cyan-500 focus:shadow-[0_0_10px_rgba(0,255,255,0.2)] placeholder-cyan-800"
								placeholder="enter access key"
								required
							/>
							<div class="absolute right-2 top-1/2 -translate-y-1/2 w-2 h-2 bg-cyan-500 animate-pulse"></div>
						</div>
					</div>
					<button
						id="submit-btn"
						type="submit"
						class="w-full font-bold bg-cyan-900/50 border border-cyan-500/50 text-cyan-400 p-2 hover:bg-cyan-900/70 focus:outline-none active:bg-cyan-950 transition-all duration-300 relative group tracking-wider"
					>
						<span>AUTHENTICATE</span>
						<div
							class="absolute inset-0 border border-cyan-500 opacity-0 group-hover:opacity-100 group-hover:scale-105 transition-all duration-300"
						></div>
					</button>
				</form>
				// Status Line
				<div class="mt-8 border-t border-cyan-500/30 pt-4">
					<p class="text-cyan-600/50 text-xs text-center tracking-wider animate-pulse">
						SECURE CONNECTION ESTABLISHED
					</p>
				</div>
			</div>
		</div>
		<script>
    const LOGIN_STATES = {
        default: {
            text: 'AUTHENTICATE',
            disabled: false
        },
        authenticating: {
            text: 'AUTHENTICATING...',
            disabled: true
        }
    };

    const MESSAGES = {
        authenticating: 'AUTHENTICATING...',
        success: 'ACCESS GRANTED - ESTABLISHING CONNECTION',
        error: 'ACCESS DENIED - INVALID CREDENTIALS'
    };

    let activeNotifications = [];
    const loginForm = {
        init() {
            const events = {
                'htmx:beforeRequest': this.handleBeforeRequest,
                'htmx:afterRequest': this.handleAfterRequest,
                'htmx:responseError': this.handleError,
                'htmx:beforeCleanupElement': this.cleanup
            };

            Object.entries(events).forEach(([event, handler]) => {
                document.addEventListener(event, (evt) => {
                    if (evt.target.id === 'login-form') {
                        handler.call(this, evt);
                    }
                });
            });
        },

        setButtonState(state) {
            const btn = document.getElementById('submit-btn');
            const { text, disabled } = LOGIN_STATES[state];
            btn.textContent = text;
            btn.disabled = disabled;
            if (disabled) {
                btn.classList.add('opacity-50', 'cursor-not-allowed');
            } else {
                btn.classList.remove('opacity-50', 'cursor-not-allowed');
            }
        },

        notify(messageKey, type) {
            const notification = showNotification(MESSAGES[messageKey], type);
            activeNotifications.push(notification);
        },

        handleBeforeRequest() {
            this.setButtonState('authenticating');
            this.notify('authenticating');
        },

        handleAfterRequest(evt) {
            this.setButtonState('default');
            if (evt.detail.successful) {
                this.notify('success');
            }
        },

        handleError() {
            this.setButtonState('default');
            this.notify('error', 'error');
        },

        cleanup(evt) {
            activeNotifications.forEach(n => {
                clearTimeout(n.timeout);
                n.element.parentElement?.removeChild(n.element);
            });
            activeNotifications = [];
        }
    };

    loginForm.init();
</script>
	}
}
